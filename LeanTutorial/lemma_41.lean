import Mathlib
open Polynomial

variable (p r : ‚Ñï) (hrnz : r ‚â† 0) [Fact (Nat.Prime p)] (A : ‚Ñï)


noncomputable def h : (ZMod p)[X] := Polynomial.factor (Polynomial.cyclotomic r (ZMod p))

lemma h_irr : Irreducible (h p r) := irreducible_factor (cyclotomic r (ZMod p))

instance h_irreducible : Fact (Irreducible (h p r)) := by
  exact Fact.mk (h_irr _ _)

-- somehow, it doesn't see hrnz if I don't explicitly give it as an argument?
lemma h_div_cyclotomic (hrnz : r ‚â† 0) : h p r ‚à£ Polynomial.cyclotomic r (ZMod p) := by
  apply factor_dvd_of_not_isUnit
  refine not_isUnit_of_degree_pos (cyclotomic r (ZMod p)) ?_
  rw [degree_cyclotomic r (ZMod p)]
  apply WithBot.coe_lt_coe.mpr
  simp only [Nat.cast_id, Nat.totient_pos]
  exact Nat.zero_lt_of_ne_zero hrnz

lemma h_div (hrnz : r ‚â† 0) : h p r ‚à£ X^r-1 := by
  trans Polynomial.cyclotomic r (ZMod p)
  . exact h_div_cyclotomic p r hrnz
  . exact cyclotomic.dvd_X_pow_sub_one r (ZMod p)

def ùîΩ := AdjoinRoot (h p r)

noncomputable instance instFieldBigF : Field (ùîΩ p r) := by
  haveI : Fact (Irreducible (h p r)) := h_irreducible p r
  exact AdjoinRoot.instField

noncomputable instance : Algebra (ZMod p) (ùîΩ p r) := by
  unfold ùîΩ
  infer_instance

noncomputable instance : Finite (ùîΩ p r) := by
  haveI : Fact (Irreducible (h p r)) := h_irreducible _ _
  have := AdjoinRoot.powerBasis (f := h p r) (Irreducible.ne_zero this.elim)
  haveI : Module.Finite (ZMod p) (ùîΩ p r) := PowerBasis.finite this
  have := Module.finite_of_finite (ZMod p) (M := ùîΩ p r)
  infer_instance

noncomputable def f : Polynomial (ZMod p) := X^r - 1

noncomputable def Œ± : AdjoinRoot (f p r) := AdjoinRoot.root (f _ _)

noncomputable def H : Submonoid (AdjoinRoot (f p r))
  := Submonoid.closure
      {h | ‚àÉ (k : ‚Ñï), k ‚â§ A ‚àß h = Œ± _ _ + AdjoinRoot.of (f _ _) (‚Üë k)}

noncomputable def G : Submonoid (ùîΩ p r) := Submonoid.map (AdjoinRoot.algHomOfDvd (h_div p r hrnz)) (H p r A)-- what is this homomorphism from and to?

-- TODO: prove G is a subgroup (enough to show that 0 ‚àâ G)
lemma g_subgroup_helper (k : ‚Ñï) (hk : k ‚â§ A) : AdjoinRoot.algHomOfDvd (h_div p r hrnz) (Œ± p r + AdjoinRoot.of (f p r) (‚Üë k)) ‚â† 0 := by
  -- this requires some conditions (p is a prime divisor of n, n has no prime divisors smaller than... etc.)
  sorry

lemma g_subgroup_helper2 : (‚Üë (G p r hrnz A)) ‚äÜ (Set.compl {0} : Set (ùîΩ p r)) := sorry

-- somehow state that G is a subgroup of the invertible elems bigF
-- ASK ALAIN

-- Show that f(X^k) = 0, needed for the definition of S (for evaluation of f at X^k to be well-defined)
lemma helper : aeval (AdjoinRoot.root (f p r) ^ k) (f p r) = 0 := by
  let f' : Polynomial (ZMod p) := f p r
  let Œ±' := AdjoinRoot.root f'
  show (aeval (Œ±' ^ k)) f' = 0
  have : (aeval (Œ±' ^ k)) f' = (Œ±' ^ k) ^ r - 1 := by
    unfold f'
    unfold f
    simp only [map_sub, AdjoinRoot.mk_X, map_pow, aeval_X, map_one]

  rw [this, ‚Üê pow_mul, mul_comm k r, pow_mul]

  have : Œ±' ^ r = 1 := by
    have : Œ±' ^ r - 1 = 0 := by calc
      Œ±' ^ r - 1 = IsAdjoinRoot.map (AdjoinRoot.isAdjoinRoot f') f' := rfl
      _         = 0 := by simp only [this, AdjoinRoot.isAdjoinRoot_map_eq_mk, AdjoinRoot.mk_self]
    have : Œ±' ^ r - 1 + 1 = 0 + 1 := congrArg (. + 1) this
    simp only [sub_add_cancel, zero_add] at this
    assumption
  simp [this]

def S : Set ‚Ñï := {
  k | ‚àÄ g ‚àà H p r A,
    g^k = AdjoinRoot.liftHom (f _ _) (Œ± _ _^k) (helper _ _) g
  }

example : ‚Ñ§ ‚Üí+* (ZMod p) := by exact Int.castRingHom (ZMod p)


#check Int.castRingHom (ZMod 3)

#check H

lemma lemma41 (a b : ‚Ñï)
  (sha : a ‚àà S p r A)  -- make the variables explicit --> ()
  (shb : b ‚àà S p r A)
  : a*b ‚àà S p r A := by
  show ‚àÄ g ‚àà H p r A,
    g^(a*b) = AdjoinRoot.liftHom (f p r) (Œ± p r^(a*b)) (helper p r) g

  intro g hg
  rw [pow_mul, sha, shb]

  -- ugly part to make sure sha and shb actually apply
  -- ASK ALAIN
  rotate_right 1
  trivial

  rotate_right 1
  rw [‚Üê sha]
  apply pow_mem
  trivial
  trivial

  -- proof of what we actually care about
  let œÜ := (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ b) (helper p r)).comp (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ a) (helper _ _))
  let œà := (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ (a * b)) (helper p r))

  have : œÜ = œà := AdjoinRoot.algHom_ext (by calc
    _ = (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ b) (helper _ _)) (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ a) (helper p r) (AdjoinRoot.root (f _ _))) := rfl
    _ = (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ b) (helper _ _)) (Œ± _ _^a) := by (rw[AdjoinRoot.liftHom_root (a := Œ± _ _ ^ a) ]; )
    _ = (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ b) (helper _ _) (Œ± _ _))^a := by (simp[AdjoinRoot.liftHom_root]; )
    _ = (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ b) (helper _ _) (AdjoinRoot.root (f _ _)))^a := rfl
    _ = (Œ± _ _ ^ b)^a := by rw[AdjoinRoot.liftHom_root]
    _ = Œ± _ _^(b*a) := by simp[pow_mul]
    _ = Œ± _ _^(a*b) := by simp[mul_comm]
    _ = (AdjoinRoot.liftHom (f _ _) (Œ± _ _ ^ (a * b)) (helper _ _)) (AdjoinRoot.root _) := by simp only [AdjoinRoot.liftHom_root]
    _ = œà (AdjoinRoot.root (f _ _)) := rfl
    )

  calc
    _ = œÜ g := rfl
    _ = œà g := by rw [this]
    _ = _ := rfl

lemma lemma42 (a b : ‚Ñï)
  (hineq : a ‚â• b)
  (ha : a ‚àà S p r A)
  (hb : b ‚àà S p r A)
  (hab : a ‚â° b [MOD r]) :
  a ‚â° b [MOD Nat.card (G p r hrnz A)] := by

  -- part one: for all polys g ‚àà ‚Ñ§/p[x][x], x^r-1 ‚à£ g(x^a) - g(x^b)
  have part1 : ‚àÄ g : Polynomial (Polynomial (ZMod p)), AdjoinRoot.mk (f p r) (g.eval (X^a)) = AdjoinRoot.mk (f p r) (g.eval (X^b)) := by
    intro g

    let ab : Polynomial (ZMod p) := X^(a-b)-1
    have f_dvd_ab : (f p r) ‚à£ ab := by
      let k := (a - b)/r
      have : r ‚à£ a-b := (Nat.modEq_iff_dvd' hineq).mp (Nat.ModEq.symm hab)
      have : r * k = (a-b) := Nat.mul_div_cancel' this
      unfold ab
      rw [‚Üêthis]
      have := sub_dvd_pow_sub_pow (X^r : Polynomial (ZMod p)) 1 k
      rw [one_pow, ‚Üê pow_mul] at this
      exact this

    let xaxb : Polynomial (ZMod p) := X^a - X^b
    have ab_dvd_xaxb : ab ‚à£ xaxb := by
      constructor -- what does this do
      rotate_left 1 -- what does this do
      . exact X^b
      . ring_nf
        rw [‚Üê pow_add, add_comm b (a-b), Nat.sub_add_cancel hineq]
        ring

    have xaxb_dvd_gxagxb : xaxb ‚à£ g.eval (X^a) - g.eval (X^b)
      := sub_dvd_eval_sub (X^a) (X^b) g

    have : (f p r) ‚à£ g.eval (X^a) - g.eval (X^b)
      := dvd_trans (dvd_trans f_dvd_ab ab_dvd_xaxb) xaxb_dvd_gxagxb

    exact eq_of_sub_eq_zero (AdjoinRoot.mk_eq_zero.mpr this)

  -- part 2: applying this to elements of H
  have part2 : ‚àÄ g ‚àà H p r A, g^a = g^b := by
    intro g hg
    -- ASK ALAIN
    rw [ha, hb] <;> try assumption

    have : Œ± p r ^ a = Œ± p r ^ b := calc
      _ = AdjoinRoot.mk (f p r) (X^a) := by rfl
      _ = AdjoinRoot.mk (f p r) ((X : Polynomial (Polynomial (ZMod p))).eval (X^a)) := by rw [eval_X]
      _ = AdjoinRoot.mk (f p r) ((X : Polynomial (Polynomial (ZMod p))).eval (X^b)) := part1 X
      _ = AdjoinRoot.mk (f p r) (X^b) := by rw[eval_X (x := X^b)]
      _ = _ := by rfl

    simp only [this]

  have : ‚àÄ g ‚àà H p r A, (AdjoinRoot.algHomOfDvd (h_div p r hrnz) g)^a = (AdjoinRoot.algHomOfDvd (h_div _ _ hrnz) g)^b
    := Œª g hg ‚Ü¶ calc
    _ = AdjoinRoot.algHomOfDvd (h_div _ _ hrnz) (g^a) := by simp only [map_pow]
    _ = AdjoinRoot.algHomOfDvd (h_div _ _ hrnz) (g^b) := by rw[part2]; assumption
    _ = (AdjoinRoot.algHomOfDvd (h_div _ _ hrnz) g)^b := by simp only [map_pow]

  have hidk : ‚àÄ g ‚àà G p r hrnz A, g^a = g^b := Œª g ‚ü®q, hq, hqg‚ü© ‚Ü¶ by
    have := this q hq
    calc
    g^a = (AdjoinRoot.algHomOfDvd (h_div _ _ hrnz) q)^a := by rw[‚Üê hqg]; rfl
    _ = (AdjoinRoot.algHomOfDvd (h_div _ _ hrnz) q)^b := this
    _ = g^b := by rw[‚Üê hqg]; rfl

  have : ‚àÄ g ‚àà G p r hrnz A, g^(a-b) = 1 := Œª g ‚ü®q, hq, hqg‚ü© ‚Ü¶ by
    -- let g' : G p r h h_divides A := ‚ü®g, ‚ü®q,hq,hqg‚ü©‚ü©
    haveI : IsRightCancelMul (G p r hrnz A) := sorry
    have : g^a = g^b := hidk g ‚ü®q, hq, hqg‚ü©
    have : g^(a-b) * g^b = 1 * g^b := by
      rw [pow_sub_mul_pow (h := hineq), one_mul, this]

    -- have : g^(a-b) = 1 := mul_right_cancel this
    -- exact this
    sorry



  have : ‚àÄ g ‚àà G p r hrnz A, orderOf g ‚à£ a-b :=
    sorry


    -- have : g'^(a-b) * g'^b = 1 * g'^b := by
    --   simp

    -- have hidk : g'^(a-b) = 1 := mul_right_cancel (a := g'^(a-b)) (G := G p r h h_divides A) this
    -- have hidk2 : ‚Üë g'^(a-b) = (‚Üë 1 : bigF p h) := by
    --   exact congrArg (coe) hidk
    -- have : (‚Üë (g'^(a-b)) : bigF p h) = g^(a-b) := rfl






  sorry

lemma lemma42'wrong (a b : ‚Ñï)
  (ha : a ‚àà S p r A)
  (hb : b ‚àà S p r A)
  (hab : a = b % r) :
  a ‚â° b [MOD Nat.card (G p r hrnz A)] := by -- how many versions of mod there are? is it possible to write is as %?
  have : ‚àÄ (g : Polynomial ‚Ñ§) (u v : ‚Ñ§), u - v ‚à£ (Polynomial.eval u g) - (Polynomial.eval v g) := by -- here there was a mistake and instead of v there was u, correct me if i am wrong
    exact fun g u v ‚Ü¶ Int.ModEq.dvd rfl -- then the proof does not work?
  let f : Polynomial (ZMod p) := X^r - 1 -- why do we not define p at any point?
  let ab : Polynomial (ZMod p) := X^(a-b % r)-1 -- why are we looking at a-b mod r and not a-b [*]
  have : f ‚à£ ab := by
    unfold ab -- what does unfold do?
    simp [hab] -- why does f divide this?
  let xaxb : Polynomial (ZMod p) := X^a - X^b
  have : ab ‚à£ xaxb := by
    unfold xaxb
    unfold ab
    rw [hab]
    simp
    --rw [sub_eq_zero]
    rw [‚Üê hab]
    --rw [pow_right_inj‚ÇÄ]
    --rw [pow_inj_mod]
    --rw [pow_inj_iff_of_orderOf_eq_zero]
    --rw [‚Üê orderOf_dvd_sub_iff_zpow_eq_zpow]
    --rw [‚Üê zpow_mod_orderOf]
    refine eq_zero_of_eq_zero ?_ (X ^ a - X ^ b) -- arrive at contradiction?
    sorry
  sorry


-- for lemma 43 reduction and degree??
-- p and n are in S as after that we consider the set of powers... and then we argue something about cardinaily

def no_prime_divisors (n : ‚Ñï) (r : ‚Ñï): Prop :=
  ‚àÄ p : ‚Ñï, Nat.Prime p ‚Üí ¬¨(p ‚à£ n ‚àß p ‚â§ r)

def isPerfectPower (n : ‚Ñ§) (p : ‚Ñï): Prop :=
  ‚àÉ m : ‚Ñ§, m > 1 ‚àß p ‚â• 2 ‚àß m^p = n


--noncomputable def polH (a : ‚Ñ§ ) : Polynomial ‚Ñ§ := X + Poly.const a

--lemma fun_in_H (a : ‚Ñï ) (e‚Çê : ‚Ñï ) : ‚àÄ g ‚àà H, g = ‚àè‚ÇÄ‚â§‚Çê‚â§A (X+a) ·µâ := by

lemma p_in_S : p ‚àà S p r A := by
  show ‚àÄ g ‚àà H p r A, g^p = AdjoinRoot.liftHom _ (Œ± p r^p) (helper _ _) g
  intro g hg
  sorry

lemma n_in_S (n r : ‚Ñï ) (hp : p ‚à£ n) (hn : no_prime_divisors n r) (hhn : ¬¨ isPerfectPower n p) (hhhn : Odd n) : n ‚àà S p r A := by
  show ‚àÄ g ‚àà H p r A, g^n = AdjoinRoot.liftHom _ (Œ± p r^n) (helper _ _) g
  intro g hg
  rw[dvd_def] at hp
  cases' hp with c hp
  rw[hp]
  rw[pow_mul]
  sorry
