import Mathlib
import AKS.basic
import AKS.lemma_41
open Polynomial

variable (n p r : ‚Ñï) (hrnz : r ‚â† 0) [pprime : Fact (Nat.Prime p)]
  (hp : p ‚à£ n) (hnnoprdivs : no_prime_divisors_below n r) (hnnotperfpow : ¬¨ is_perfect_power n) (hnodd : Odd n) (hn_gt_one : n > 1)
  (childs_binomial_theorem : ‚àÄ a ‚àà Finset.range (A n r + 1),
    (Œ± p r + ‚Üë a)^n = Œ± p r^n + ‚Üë a)
  (hordern : orderOf (‚Üë n : ZMod r) > ‚åä(Real.logb 2 n) ^ 2 ‚åã‚Çä)

lemma card_rootSet_le_card_aroots {R A : Type*} [Field R] [CommRing A] [IsDomain A] [Algebra R A]
  (g : R[X]) : Nat.card (g.rootSet A) ‚â§ (g.aroots A).card
  := by
  classical
  simp only [Nat.card_eq_fintype_card, rootSet]
  simp_all only [Finset.coe_sort_coe, Multiset.mem_toFinset, mem_roots', ne_eq, Polynomial.map_eq_zero, IsRoot.def,
    eval_map_algebraMap, Fintype.card_coe]
  exact Multiset.toFinset_card_le (g.aroots A)

set_option maxHeartbeats 1000000

include childs_binomial_theorem hn_gt_one hordern in
lemma lemma43 (g q : Polynomial (ZMod p))
  (hg' : AdjoinRoot.mk (f p r) g ‚àà H n p r) (hq' : AdjoinRoot.mk (f p r) q ‚àà H n p r)
  (hmod : AdjoinRoot.mk (h p r) g = AdjoinRoot.mk (h p r) q)
  (hdegg' : Polynomial.degree g < Nat.card (R n p r hrnz hp hnnoprdivs)) (hdegq' : Polynomial.degree q < Nat.card (R n p r hrnz hp hnnoprdivs))
  : g = q := by

  let Œî := g - q

  suffices : Œî = 0
  . exact sub_eq_zero.mp this
  -- the idea of this proof is to show that Œî has too many roots for it not to be the zero polynomial.
  -- Polynomial.eq_zero_of_natDegree_lt_card_of_eval_eq_zero
  -- doesn't quite work for us, as the roots of Œî lie in an algebra over ZMod p.
  -- instead, we do it a bit more manually.

  by_contra Œî_nzero

  have is_root : ‚àÄ k ‚àà S n p r, Œî.aeval (Œ≤ p r^k) = 0
    := by
    intro k hk
    unfold Œî
    simp
    suffices : g.aeval (Œ≤ p r^k) = q.aeval (Œ≤ p r^k)
    . exact sub_eq_zero_of_eq this
    have eqg := consequence_S n p r hrnz k hk g hg'
    have eqq := consequence_S n p r hrnz k hk q hq'
    rw[eqg, eqq]
    congr

  have hdegŒî : Œî.degree < Nat.card (R n p r hrnz hp hnnoprdivs) := by
    cases Classical.em (g = 0) with
    | inl hg => simpa [Œî, hg]
    | inr hg => cases Classical.em (q = 0) with
      | inl hq => simpa [Œî, hq]
      | inr hq =>

    rw [‚Üê Polynomial.natDegree_lt_iff_degree_lt] at hdegg' hdegq' ‚ä¢ <;> try assumption
    have : 1 ‚â§ Nat.card (R n p r hrnz hp hnnoprdivs) := by
      haveI : Fintype (R n p r hrnz hp hnnoprdivs) := instRFintype n p r hrnz hp hnnoprdivs
      rw[Nat.card_eq_fintype_card]
      exact Fintype.card_pos
    rw [Nat.lt_iff_le_pred this] at hdegg' hdegq' ‚ä¢
    exact (Polynomial.natDegree_sub_le_iff_left hdegq').mpr hdegg'

  have : ‚àÄ k ‚àà R n p r hrnz hp hnnoprdivs, ‚àÉ (k' : S n p r), k' = k.val
    := by
    intro k hk
    induction hk using Subgroup.closure_induction with
    | mem x hx =>
      simp only [Set.mem_insert_iff, Set.mem_singleton_iff] at hx
      cases hx with
      | inl hx =>
        use ‚ü®n, ninS n p r childs_binomial_theorem‚ü©
        simp[hx, n']
      | inr hx =>
        use ‚ü®p, pinS n p r‚ü©
        simp[hx, p']
    | one =>
      use ‚ü®1, one_in_S n p r‚ü©
      simp
    | mul x y hx hy hx‚ÇÇ hy‚ÇÇ =>
      obtain ‚ü®‚ü®k‚ÇÅ', k‚ÇÅ'_in_S‚ü©, hk‚ÇÅ'‚ü© := hx‚ÇÇ
      obtain ‚ü®‚ü®k‚ÇÇ', k‚ÇÇ'_in_S‚ü©, hk‚ÇÇ'‚ü© := hy‚ÇÇ
      use ‚ü®k‚ÇÅ' * k‚ÇÇ', lemma41 n p r _ _ k‚ÇÅ'_in_S k‚ÇÇ'_in_S‚ü©
      simp[hk‚ÇÅ', hk‚ÇÇ']
    | inv x hx ih =>
      -- TODO: is there no induction principle to eliminate this step in case of a finite group?
      -- or something like: a finite submonoid is a subgroup?
      -- can't find anything
      let o := orderOf x
      have : x‚Åª¬π = x^(o-1) := by
        refine Eq.symm (eq_inv_of_mul_eq_one_left ?_)
        nth_rw 2 [‚Üê pow_one x]
        rw [‚Üê pow_add, Nat.sub_add_cancel (orderOf_pos x)]
        exact pow_orderOf_eq_one x
      rw[this]
      obtain ‚ü®‚ü®i, hi‚ÇÅ‚ü©, hi‚ÇÇ‚ü© := ih
      use ‚ü®i^(o-1), pow_in_S n p r _ _ hi‚ÇÅ‚ü©
      simp[hi‚ÇÇ]

  let fn (k : R n p r hrnz hp hnnoprdivs) : S n p r :=
    Classical.choose $ this k k.property

  have fn_prop (k : R n p r hrnz hp hnnoprdivs) : fn k = k.val.val:=
    Classical.choose_spec (this k k.property)

  let fn' (k : R n p r hrnz hp hnnoprdivs) := by
    let e := fn k
    exact Œ≤ p r^e.val

  have fn'_root (k : R n p r hrnz hp hnnoprdivs) : fn' k ‚àà Œî.rootSet _ := by
    rw[Polynomial.mem_rootSet]
    simp only [ne_eq, Œî_nzero, not_false_eq_true, true_and]
    unfold fn'
    exact is_root (fn k) (fn k).property

  let fn'' (k : R n p r hrnz hp hnnoprdivs) : Œî.rootSet _ :=
    ‚ü® fn' k, fn'_root k ‚ü©

  have fn''_inj : Function.Injective fn'' := by
    have Œ≤_nzero : Œ≤ p r ‚â† 0 := by
      have := nz_of_Œ≤_add_x n p r hrnz hp hnnoprdivs hn_gt_one childs_binomial_theorem hordern 0 (Finset.mem_range.mpr (Nat.zero_lt_succ (A n r)))
      simp at this
      exact this

    let Œ≥ := Units.mk0 (Œ≤ p r) Œ≤_nzero
    have Œ≥_order : orderOf Œ≥ = orderOf (Œ≤ p r) := orderOf_eq_orderOf_iff.mpr $ by
      intro n
      simp[Œ≥, ‚Üê Units.eq_iff]

    intro x y hxy
    unfold fn'' fn' at hxy
    rw[Subtype.mk_eq_mk] at hxy
    simp only at hxy

    replace hxy : Œ≥ ^ ((fn x).val) = Œ≥ ^ ((fn y).val)
      := by
      rw[‚Üê Units.eq_iff]
      simp[Œ≥,hxy]

    rw[‚Üê mul_one (Œ≥ ^ _)] at hxy
    replace hxy := div_eq_of_eq_mul' hxy.symm
    rw[‚Üê zpow_natCast_sub_natCast] at hxy
    replace hxy := orderOf_dvd_iff_zpow_eq_one.mpr hxy
    rw[Œ≥_order, order_of_X_in_F _ _ _ hrnz hp hnnoprdivs,
      ‚Üê ZMod.intCast_eq_intCast_iff_dvd_sub, Int.cast_natCast, Int.cast_natCast,
      fn_prop x, fn_prop y] at hxy

    apply Subtype.eq
    apply Units.eq_iff.mp
    exact hxy

  have : Nat.card (R n p r hrnz hp hnnoprdivs) ‚â§ Nat.card (Œî.rootSet (ùîΩ p r)) :=
    Nat.card_le_card_of_injective fn'' fn''_inj

  have := calc
    Nat.card ‚Ü•(R n p r hrnz hp hnnoprdivs) ‚â§ Nat.card ‚Üë(Œî.rootSet (ùîΩ p r)) := this
    _ ‚â§ (Œî.aroots (ùîΩ p r)).card := card_rootSet_le_card_aroots Œî
    _ = (Œî.map (algebraMap _ _)).roots.card := by rw[aroots_def]
    _ ‚â§ (Œî.map (algebraMap _ _)).natDegree := Polynomial.card_roots' $ Œî.map (algebraMap _ _)
    _ = Œî.natDegree := Polynomial.natDegree_map (algebraMap (ZMod p) (ùîΩ p r))
    _ < Nat.card (R n p r hrnz hp hnnoprdivs) := (Polynomial.natDegree_lt_iff_degree_lt Œî_nzero).mpr hdegŒî

  exact Nat.lt_irrefl _ this
